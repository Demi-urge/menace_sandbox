name: Tests

on:
  push:
    paths:
      - '**.py'
      - 'tests/**'
      - 'setup_env.sh'
      - '.github/workflows/tests.yml'
  pull_request:
    paths:
      - '**.py'
      - 'tests/**'
      - 'setup_env.sh'
      - '.github/workflows/tests.yml'
  workflow_dispatch:
    inputs:
      stress:
        description: 'Run stress tests'
        required: false
        default: 'false'

jobs:
  path-checks:
    runs-on: ubuntu-latest
    env:
      MENACE_SAFE: "1"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install pre-commit
        run: pip install pre-commit
      - name: Check for static path references
        run: "python tools/check_static_paths.py $(git ls-files '*.py')"
      - name: Check for dynamic path references
        run: "python tools/check_dynamic_paths.py $(git ls-files '*.py')"
      - name: Enforce ContextBuilder usage
        run: python scripts/check_context_builder_usage.py
      - name: Ensure SelfCodingEngine bots use @self_coding_managed
        run: python tools/check_coding_bot_decorators.py
      - name: Check for direct SelfCodingEngine patch usage
        run: "python tools/check_self_coding_integrity.py $(git ls-files '*.py')"
      - name: ensure all bots are self-coding managed
        run: pre-commit run self-coding-registration --all-files
      - name: Check for unmanaged bots
        run: python tools/find_unmanaged_bots.py
      - name: Prevent unwrapped engine.generate_helper usage
        run: "python tools/check_engine_generate_helper_wrapping.py $(git ls-files '*.py')"
      - name: Verify patch provenance tags
        run: |
          git fetch --no-tags origin main
          for commit in $(git rev-list origin/main..HEAD); do
            python scripts/check_patch_provenance.py --ci --commit "$commit"
          done

  tests:
    runs-on: ubuntu-latest
    needs:
      - path-checks
    env:
      MENACE_SAFE: "1"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: bash ./setup_env.sh
      - name: Install pre-commit
        run: pip install pre-commit
      - name: Enforce ContextBuilder usage
        run: python scripts/check_context_builder_usage.py
      - name: Check for ungoverned embedding calls
        run: pre-commit run check-governed-embeddings --all-files
      - name: Check for direct sqlite3 connections
        run: pre-commit run forbid-sqlite3-connect --all-files
      - name: Prevent direct Stripe imports
        run: pre-commit run forbid-stripe-imports --all-files
      - name: Prevent Stripe live keys or endpoints
        run: pre-commit run forbid-stripe-keys --all-files
      - name: Prevent direct SelfCodingEngine patch usage
        run: pre-commit run check-self-coding-integrity --all-files
      - name: ensure all bots are self-coding managed
        run: pre-commit run self-coding-registration --all-files
      - name: Check for unmanaged bots
        run: python tools/find_unmanaged_bots.py
      - name: Prevent unwrapped engine.generate_helper usage
        run: pre-commit run check-engine-generate-helper --all-files
      - name: Run flake8
        run: pre-commit run flake8 --all-files
      - name: Enforce DB router usage
        run: pytest tests/test_db_router_enforcement.py -q
      - name: Run sandbox runner security tests
        run: pytest tests/test_workflow_sandbox_runner_security.py -q
      - name: Run unit and integration tests
        run: pytest -k "not fuzz" --ignore=tests/test_workflow_sandbox_runner_security.py
      - name: Run fuzz and property-based tests
        run: pytest tests/fuzz tests/test_bot_testing_bot_property.py tests/test_communication_testing_bot_property.py

  workflow-policy-integration:
    runs-on: ubuntu-latest
    env:
      MENACE_SAFE: "1"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: bash ./setup_env.sh
      - name: Run workflow and policy integration tests
        run: pytest tests/integration/test_workflow_policy_integration.py -q

  stress-tests:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.stress == 'true'
    runs-on: ubuntu-latest
    env:
      MENACE_SAFE: "1"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: bash ./setup_env.sh
      - name: Run stress tests
        run: RUN_STRESS_TESTS=1 pytest tests/stress
